=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 NAME

Parse::SQLOutput - Parse SQL table output

=for html
<a href="https://travis-ci.org/ingydotnet/parse-sqloutput-pm"><img src="https://travis-ci.org/ingydotnet/parse-sqloutput-pm.png" alt="parse-sqloutput-pm"></a>
<a href="https://coveralls.io/r/ingydotnet/parse-sqloutput-pm?branch=master"><img src="https://coveralls.io/repos/ingydotnet/parse-sqloutput-pm/badge.png" alt="parse-sqloutput-pm"></a>

=head1 SYNOPSIS

    use Parse::SQLOutput;

    my $sql_table_output = ...
    my $data = Parse::SQLOutput->new(<options>)->parse($sql_table_output);

=head1 DESCRIPTION

This module can parse the pretty printed tables you get from SQL queries, into
Perl data structures. There are a few options depending on how you want the
data to be formatted.

NOTE: This has only been tested with simple MySQL output so far.
      Patches welcome.

=head1 OPTIONS

This parser can return your data in various forms depending on your needs:

=over

=item C<< ->new(as => 'hoh'|'hol'|'loh'|'lol') >>

Specify the form that the result should be formatted in. Hash-of-hash, hash-of-
list, list-of-hash or list-of-list. Default is 'hoh'.

=item C<< ->new(header => 0|1) >>

Specify whether the header values should be returned. Default is 0. If the
result is a hash, the header will be in the key of C<''> (empty string).

=item C<< ->new(key => 'key-name') >>

If the result is a 'hash', specify which column to use as the key of the hash.
The default is C<''>, which means to use the first column's name.

=back

=head1 AUTHOR

Ingy döt Net <ingy@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright 2012-2014. Ingy döt Net.

This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>

=cut
